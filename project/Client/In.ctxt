#BlueJ class context
comment0.target=In()
comment0.text=\nCreate\ an\ input\ stream\ from\ standard\ input.\n\n
comment1.params=socket
comment1.target=In(java.net.Socket)
comment1.text=\nCreate\ an\ input\ stream\ from\ a\ socket.\n\n
comment10.target=String\ readLine()
comment10.text=\nRead\ and\ return\ the\ next\ line.\n\n
comment11.target=char\ readChar()
comment11.text=\nRead\ and\ return\ the\ next\ character.\n\n
comment12.target=String\ readAll()
comment12.text=\nRead\ and\ return\ the\ remainder\ of\ the\ input\ as\ a\ string.\n\n
comment13.target=String\ readString()
comment13.text=\nRead\ and\ return\ the\ next\ string.\n\n
comment14.target=int\ readInt()
comment14.text=\nRead\ and\ return\ the\ next\ int.\n\n
comment15.target=double\ readDouble()
comment15.text=\nRead\ and\ return\ the\ next\ double.\n\n
comment16.target=float\ readFloat()
comment16.text=\nRead\ and\ return\ the\ next\ float.\n\n
comment17.target=long\ readLong()
comment17.text=\nRead\ and\ return\ the\ next\ long.\n\n
comment18.target=short\ readShort()
comment18.text=\nRead\ and\ return\ the\ next\ short.\n\n
comment19.target=byte\ readByte()
comment19.text=\nRead\ and\ return\ the\ next\ byte.\n\n
comment2.params=url
comment2.target=In(URL)
comment2.text=\nCreate\ an\ input\ stream\ from\ a\ URL.\n\n
comment20.target=boolean\ readBoolean()
comment20.text=\nRead\ and\ return\ the\ next\ boolean,\ allowing\ case-insensitive\n"true"\ or\ "1"\ for\ true,\ and\ "false"\ or\ "0"\ for\ false.\n\n
comment21.target=String[]\ readAllStrings()
comment21.text=\nRead\ all\ strings\ until\ the\ end\ of\ input\ is\ reached,\ and\ return\ them.\n\n
comment22.target=int[]\ readAllInts()
comment22.text=\nRead\ all\ ints\ until\ the\ end\ of\ input\ is\ reached,\ and\ return\ them.\n\n
comment23.target=double[]\ readAllDoubles()
comment23.text=\nRead\ all\ doubles\ until\ the\ end\ of\ input\ is\ reached,\ and\ return\ them.\n\n
comment24.target=void\ close()
comment24.text=\nClose\ the\ input\ stream.\n\n
comment25.params=filename
comment25.target=int[]\ readInts(String)
comment25.text=\nReads\ all\ ints\ from\ a\ file\ \n@deprecated\ Clearer\ to\ use\ \n<tt>new\ In(filename)</tt>.{@link\ \#readAllInts()}\n\n
comment26.params=filename
comment26.target=double[]\ readDoubles(String)
comment26.text=\nReads\ all\ doubles\ from\ a\ file\n@deprecated\ Clearer\ to\ use\ \n<tt>new\ In(filename)</tt>.{@link\ \#readAllDoubles()}\n\n
comment27.params=filename
comment27.target=String[]\ readStrings(String)
comment27.text=\nReads\ all\ strings\ from\ a\ file\n@deprecated\ Clearer\ to\ use\ \n<tt>new\ In(filename)</tt>.{@link\ \#readAllStrings()}\n\n
comment28.target=int[]\ readInts()
comment28.text=\nReads\ all\ ints\ from\ stdin\ \n@deprecated\ Clearer\ to\ use\ {@link\ StdIn\#readAllInts()}\n\n
comment29.target=double[]\ readDoubles()
comment29.text=\nReads\ all\ doubles\ from\ stdin\n@deprecated\ Clearer\ to\ use\ {@link\ StdIn\#readAllDoubles()}\n\n
comment3.params=file
comment3.target=In(File)
comment3.text=\nCreate\ an\ input\ stream\ from\ a\ file.\n\n
comment30.target=String[]\ readStrings()
comment30.text=\nReads\ all\ strings\ from\ stdin\n@deprecated\ Clearer\ to\ use\ {@link\ StdIn\#readAllStrings()}\n\n
comment31.params=args
comment31.target=void\ main(String[])
comment31.text=\nTest\ client.\n\n
comment4.params=s
comment4.target=In(String)
comment4.text=\nCreate\ an\ input\ stream\ from\ a\ filename\ or\ web\ page\ name.\n\n
comment5.params=scanner
comment5.target=In(Scanner)
comment5.text=\nCreate\ an\ input\ stream\ from\ a\ given\ Scanner\ source;\ use\ with\ \n<tt>new\ Scanner(String)</tt>\ to\ read\ from\ a\ string.\n<p>\nNote\ that\ this\ does\ not\ create\ a\ defensive\ copy,\ so\ the\nscanner\ will\ be\ mutated\ as\ you\ read\ on.\ \n\n
comment6.target=boolean\ exists()
comment6.text=\nDoes\ the\ input\ stream\ exist?\n\n
comment7.target=boolean\ isEmpty()
comment7.text=\nIs\ the\ input\ empty\ (except\ possibly\ for\ whitespace)?\ Use\ this\nto\ know\ whether\ the\ next\ call\ to\ {@link\ \#readString()},\ \n{@link\ \#readDouble()},\ etc\ will\ succeed.\n\n
comment8.target=boolean\ hasNextLine()
comment8.text=\nDoes\ the\ input\ have\ a\ next\ line?\ Use\ this\ to\ know\ whether\ the\nnext\ call\ to\ {@link\ \#readLine()}\ will\ succeed.\ <p>\ Functionally\nequivalent\ to\ {@link\ \#hasNextChar()}.\n\n
comment9.target=boolean\ hasNextChar()
comment9.text=\nIs\ the\ input\ empty\ (including\ whitespace)?\ Use\ this\ to\ know\ \nwhether\ the\ next\ call\ to\ {@link\ \#readChar()}\ will\ succeed.\ <p>\ Functionally\nequivalent\ to\ {@link\ \#hasNextLine()}.\n\n
numComments=32
